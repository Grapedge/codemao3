{"version":3,"sources":["serviceWorker.js","index.js","Select.js","Dialog.js","App.js","AppBar.js","StarBox.js","Spawner.js","SpawnerContainer.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","createObjectByArray","arr","newObj","Object","values","map","v","i","optionValueByKey","obj","assign","keys","k","Select","value","select","onChange","props","Control","className","this","as","ref","r","defaultValue","option","key","index","React","Component","defaultProps","showMessageBox","message","title","type","alert","trials","normals","global","x","set","push","course","onUnload","e","returnValue","createSpawner","spawners","state","spawnerId","spawnerCount","courseList","setState","onCreateSpawner","handleCreateSpanwerModal","show","showCreateModal","courseListType","courseSet","courseSetName","courseIndex","length","getCourseList","isTrial","name","addEventListener","removeEventListener","onHide","centered","Header","closeButton","Title","Body","controId","试听课","正式课","list","Footer","variant","onClick","AppBar","style","background","collapseOnSelect","expand","alt","src","height","Toggle","id","Menu","alignRight","right","left","Item","open","Star","hover","starIndex","out","click","bright","onMouseEnter","onMouseLeave","StarBox","starHover","brightIndex","starOut","activeIndex","starClick","stars","count","Spawner","parseBasicInfo","event","text","target","patterns","matches","p","exec","basic","setInputValue","account","consultant","isNaN","parseInt","age","handleChange","inputValue","handleCheckBoxChange","checked","indexOf","splice","handleSelectChange","onClickSpawn","template","result","lastResult","setAlertVisible","spawnResult","search","replace","matched","Array","isArray","join","execCommand","showAlert","star","mapKey","courseSelect","courseSelectDefaultValue","formElement","createForm","form","forms","createElement","Form","Row","Col","placeholder","Check","defaultChecked","Math","random","label","elements","item","Card","fontSize","bg","width","Button","Modal","SpawnerContainer","Container","fluid"],"mappings":"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","file":"static/js/main.c179a385.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\r\nimport { Form } from 'react-bootstrap';\r\n\r\nexport function createObjectByArray(arr) {\r\n    let newObj = {};\r\n    Object.values(arr).map((v, i)=> {\r\n        newObj[v] = i;\r\n        return i;\r\n    })\r\n    return newObj;\r\n}\r\nexport function optionValueByKey(obj) {\r\n    let newObj = {};\r\n    Object.assign(newObj, obj);\r\n    Object.keys(newObj).map(k=> newObj[k] = k);\r\n    return newObj;\r\n}\r\n/**\r\n * 选择框\r\n */\r\nexport class Select extends React.Component {\r\n    static defaultProps = {\r\n        option: {}   \r\n    }\r\n\r\n    value = ()=> {\r\n        return this.select.value;\r\n    }\r\n\r\n    onChange = ()=> {\r\n        if (this.props.onChange) {\r\n            this.props.onChange(this.select.value)\r\n        }\r\n    }\r\n    render() {\r\n        return (            \r\n                <Form.Control className={this.props.className} as=\"select\" onChange={this.onChange} ref={r=> this.select = r} defaultValue={this.props.defaultValue || this.props.option[Object.keys(this.props.option)[0]]}>\r\n                    {Object.keys(this.props.option).map((key, index)=> {\r\n                        return ( \r\n                            <option key={key + this.props.keys || \"\" + index} value={this.props.option[key]}>{key}</option>\r\n                        );\r\n                    })}\r\n                </Form.Control>\r\n            \r\n        );\r\n    }\r\n}","export function showMessageBox(message, title, type) {\r\n  alert(message);\r\n}\r\n","import React from \"react\";\nimport AppBar from \"./AppBar\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport { Select, optionValueByKey, createObjectByArray } from \"./Select\";\nimport { SpawnerContainer } from \"./SpawnerContainer\";\nimport { showMessageBox } from \"./Dialog\";\n\n// 读取配置信息\nconst trials = {};\nconst normals = {};\nfor (let x of global.trials) {\n  if (!trials[x.set]) {\n    trials[x.set] = [];\n  }\n  trials[x.set].push(x.course);\n}\n\n/**\n * 反馈生成器\n */\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      courseListType: \"试听课\", //\n      courseList: {}, // 当前选择的课程类型\n      courseSet: [], // 当前选择的课程集合\n      courseIndex: 0, // 当前选择的课程编号\n      courseSetName: \"\",\n      showCreateModal: false,\n      spawners: []\n    };\n\n    this.spawnerCount = 0;\n    //this.trialOption = optionValueByKey(trials);\n    //this.normalOption = optionValueByKey(normals);\n  }\n\n  onUnload = e => {\n    e.returnValue = \"刷新后已填写模板将被清除\";\n    return \"刷新后已填写模板将被清除\";\n  };\n\n  componentDidMount() {\n    window.addEventListener(\"beforeunload\", this.onUnload);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"beforeunload\", this.onUnload);\n  }\n\n  createSpawner = (course, index) => {\n    const spawners = this.state.spawners;\n    spawners.push({\n      spawnerId: ++this.spawnerCount,\n      course: course[index],\n      courseList: course\n    });\n    this.setState({\n      spawners: spawners\n    });\n  };\n  // 创建新的生成器时调用\n  onCreateSpawner = () => {\n    this.handleCreateSpanwerModal(true);\n  };\n\n  handleCreateSpanwerModal = show => {\n    //const courseSet = Object.keys(this.trialOption)[0];\n    this.setState({\n      showCreateModal: show,\n      courseList: trials,\n      courseListType: \"试听课\",\n      courseSet: trials[Object.keys(trials)[0]],\n      courseSetName: Object.keys(trials)[0],\n      courseIndex: trials[Object.keys(trials)[0]].length > 0 ? 0 : -1\n    });\n  };\n\n  getCourseList = () => {\n    if (this.courseSet) {\n      const v = this.courseSet.value();\n      const set = this.state.isTrial ? trials : normals;\n      return set[v].map(k => k.name);\n    } else {\n      return [];\n    }\n  };\n  render() {\n    return (\n      <div className=\"main\">\n        <AppBar title={\"反馈生成器\"} onCreateSpawner={this.onCreateSpawner} />\n        <div className=\"main\">\n          <SpawnerContainer spawners={this.state.spawners} />\n        </div>\n\n        <Modal\n          show={this.state.showCreateModal}\n          onHide={() => this.handleCreateSpanwerModal(false)}\n          centered\n        >\n          <Modal.Header closeButton>\n            <Modal.Title>新建模板</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <h5>信息配置</h5>\n            <Select\n              controId=\"courseType\"\n              option={{\n                试听课: \"试听课\",\n                正式课: \"正式课\"\n              }}\n              onChange={v => {\n                const list = v === \"试听课\" ? trials : normals;\n                const set = list[Object.keys(list)[0]] || [];\n                const index = set.length > 0 ? 0 : -1;\n                this.setState({\n                  courseListType: v,\n                  courseList: list,\n                  courseSet: set,\n                  courseIndex: index\n                });\n              }}\n              className=\"mb-1\"\n            />\n\n            <Select\n              className=\"mb-1\"\n              controId=\"courseSet\"\n              option={optionValueByKey(this.state.courseList)}\n              onChange={v => {\n                this.setState({\n                  courseSetName: v,\n                  courseSet: this.state.courseList[v],\n                  courseIndex: this.state.courseList[v].length > 0 ? 0 : -1\n                });\n              }}\n            />\n            <Select\n              controId=\"courseLis23t\"\n              className=\"mb-1\"\n              defaultValue={0}\n              keys={\n                this.state.courseListType + \"[-]\" + this.state.courseSetName\n              }\n              option={createObjectByArray(\n                this.state.courseSet.map(v => v.name)\n              )}\n              onChange={v => {\n                this.setState({\n                  courseIndex: v\n                });\n              }}\n            ></Select>\n            {/*courses[this.state.courseSet] ? createObjectByArray(courses[this.state.courseSet].map(v=>v.name)) : {}*/}\n          </Modal.Body>\n          <Modal.Footer>\n            <Button\n              variant=\"secondary\"\n              onClick={() => this.handleCreateSpanwerModal(false)}\n            >\n              取消\n            </Button>\n            <Button\n              variant=\"primary\"\n              onClick={() => {\n                if (this.state.courseIndex < 0) {\n                  showMessageBox(\n                    \"课程索引错误，请确定是否选择了正确的课程\",\n                    \"错误\",\n                    \"error\"\n                  );\n                } else {\n                  //this.createSpawner(course[sthis.state.courseSet][this.state.courseIndex]);\n                  this.createSpawner(\n                    this.state.courseSet,\n                    this.state.courseIndex\n                  );\n                  this.handleCreateSpanwerModal(false);\n                }\n              }}\n            >\n              新建\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\r\nimport { Navbar,  Dropdown, Button } from 'react-bootstrap';\r\nimport { showMessageBox } from './Dialog';\r\n\r\nexport default class AppBar extends React.Component {\r\n    render() {\r\n        return (\r\n            <Navbar style={{\r\n                background: 'linear-gradient(45deg, LIGHTCORAL, LIGHTSALMON)'\r\n            }} variant=\"light\" collapseOnSelect expand=\"lg\">\r\n                <img\r\n                    alt=\"\"\r\n                    src=\"https://static.codemao.cn/community_official/static/media/header_logo.54ac0e13.svg\"\r\n                    height=\"30\"\r\n                    className=\"d-inline-block align-top mr-auto\"\r\n                />\r\n                <Button variant='outline-light' onClick={this.props.onCreateSpawner}>新建</Button>\r\n                <Dropdown>\r\n                    <Dropdown.Toggle variant=\"outline-light\" id=\"dropdown-menu\">\r\n                        <i className='iconfont iconmenu'></i>\r\n                    </Dropdown.Toggle>\r\n                    <Dropdown.Menu alignRight style={{right: 0, left: \"auto\"}}>\r\n                        <Dropdown.Item onClick={\r\n                            ()=>window.open(\"http://wpa.qq.com/msgrd?v=3&uin=203202537&site=qq&menu=yes\")\r\n                        }>建议与模板提交</Dropdown.Item>\r\n                        <Dropdown.Item onClick={\r\n                            ()=>showMessageBox(\"功能待添加\")\r\n                        }>Todo</Dropdown.Item>\r\n                    </Dropdown.Menu>\r\n                </Dropdown>\r\n            </Navbar>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport './StarBox.css';\r\n\r\nclass Star extends React.Component {\r\n    hover = e => this.props.hover(this.props.starIndex);\r\n    out = e => this.props.out();\r\n    click = e => this.props.click(this.props.starIndex);\r\n    render() {\r\n      let className = 'iconfont iconstar star';\r\n      className += this.props.bright ? '-bright' : '';\r\n      return (<i className={className} onMouseEnter={this.hover} onMouseLeave={this.out} onClick={this.click}></i>);\r\n    }\r\n  }\r\n  \r\nexport class StarBox extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      stars: [],\r\n      brightIndex: props.count - 1,\r\n      activeIndex: props.count - 1\r\n    };\r\n  }\r\n  starHover = index => {\r\n    this.setState({ brightIndex: index });\r\n  };\r\n  starOut = () => {\r\n    this.setState({ brightIndex: this.state.activeIndex });\r\n  };\r\n  starClick = index => {\r\n    this.setState({ activeIndex: index });\r\n    if (this.props.onChange) {\r\n        this.props.onChange(index + 1);\r\n    }\r\n  };\r\n  componentDidMount() {\r\n    let stars = [];\r\n    for (let i = 0; i < this.props.count; i++) {\r\n      stars.push(i);\r\n    }\r\n    this.setState({ stars: stars });\r\n  }\r\n  render() {\r\n    return (<div className={this.props.className}>\r\n      {this.state.stars.map(i => {\r\n        return (<Star starIndex={i} bright={this.state.brightIndex >= i} key={'star' + i} hover={this.starHover} out={this.starOut} click={this.starClick} />);\r\n      })}\r\n    </div>);\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { Card, Form, Modal, Col, Button } from 'react-bootstrap';\r\nimport { Select } from './Select'\r\nimport { StarBox } from './StarBox';\r\nimport { showMessageBox } from './Dialog';\r\n\r\nexport class Spawner extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.inputValue = {\r\n            course: props.course.name,\r\n            star: \"⭐⭐⭐⭐⭐\",\r\n            name: \"训练师\",\r\n        };\r\n        this.basic = {};\r\n        this.mapKey = 0;\r\n        this.state = {\r\n            showAlert: false\r\n        };\r\n        this.lastResult = '';\r\n        const { course } = props;\r\n        // add v2.0\r\n        const {courseList} = props;\r\n        this.courseList = courseList;\r\n        this.courseSelect = {};\r\n        this.courseSelectDefaultValue = 0;\r\n        courseList.map((v, i)=> {\r\n            if (props.course.name === v.name) {\r\n                this.courseSelectDefaultValue = i;\r\n            }\r\n            this.courseSelect[v.name] = i;\r\n            return v;\r\n        });\r\n\r\n        this.state = {\r\n            course: course,\r\n            formElement: this.createForm(course.form)\r\n        }\r\n\r\n    }\r\n\r\n    static defaultProps = {\r\n        spawnerId: null,\r\n        course: {\r\n            name: '课程名',\r\n            form: [\r\n                {\r\n                    title: \"基础信息\",\r\n                    item: \r\n                    [\r\n                        {\r\n                            \"type\": \"info\"\r\n                        } \r\n                    ]\r\n                },\r\n                {\r\n                    title: \"整体表现\",\r\n                    item: \r\n                    [\r\n                        {\r\n                            \"type\": \"star-box\"\r\n                        }\r\n                    ]\r\n                }\r\n            ],\r\n            template: []   \r\n        }\r\n    }\r\n\r\n    setInputValue(name, value) {\r\n        this.inputValue[name] = value;\r\n    }\r\n    parseBasicInfo = event=> {\r\n        const text = event.target.value;\r\n        const patterns = [\r\n            /^(\\S*?)(\\d+)/g,\r\n            /年龄：(\\d+)/g,\r\n            /性别：(\\S+)/g,\r\n            /年级：(\\S+)/g,\r\n            /编程基础：(\\S+)/g,\r\n            /电脑操作：(\\S+)/g,\r\n            /老师偏好：(\\S+)/g,\r\n            /家长懂编程：(\\S+)/g,\r\n            /家长期望：(\\S+)/g,\r\n            /课程顾问：(\\S+)/g,\r\n            /班主任：(\\S+)/g,\r\n        ];\r\n        const matches = [''];\r\n        for (let p in patterns) {\r\n            const match = patterns[p].exec(text);\r\n            if (match === null) {\r\n                matches.push('未填');\r\n                if (p === 0) matches.push('未填');\r\n                continue;\r\n             }\r\n            for (let i = 1; i < match.length; i++) {\r\n                matches.push(match[i]);\r\n            }\r\n        }\r\n\r\n        if (matches) {\r\n            this.basic.name.value = matches[1] || '';\r\n            this.setInputValue(\"name\", this.basic.name.value);\r\n            this.basic.account.value = matches[2] || '';\r\n            this.setInputValue(\"id\", this.basic.account.value);\r\n            this.basic.consultant.value = matches[11] || '';\r\n            this.setInputValue(\"consultant\", this.basic.consultant.value);\r\n        }\r\n        if (!isNaN(parseInt(matches[3]))) {\r\n            this.basic.age.value = parseInt(matches[3]);\r\n            this.setInputValue(\"age\", this.basic.age.value);\r\n        }\r\n    }\r\n\r\n    handleChange = event=> {\r\n        this.inputValue[event.target.name] = event.target.value;\r\n    }\r\n\r\n    handleCheckBoxChange = event=> {\r\n        const {target} = event;\r\n        const {checked, value, name} = target;\r\n        const index = this.inputValue[name].indexOf(value);\r\n        if (checked) {\r\n            // 选中\r\n            if (index === -1) {\r\n                this.inputValue[name].push(value);\r\n            }\r\n        } else {\r\n            if (index !== -1) {\r\n                this.inputValue[name].splice(index, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    handleSelectChange = (name, value)=> {\r\n        this.inputValue[name] = value;\r\n    }\r\n\r\n    createForm(form) {\r\n        const forms = [];\r\n        const createElement = e=> {\r\n            switch(e.type) {\r\n                // 基础信息填写\r\n                case \"info\":\r\n                    return (\r\n                        <Form key={\"input\" + this.mapKey++}>\r\n                            <Form.Row className=\"pb-1\">\r\n                                <Col>\r\n                                    <Form.Control type=\"text\" placeholder=\"基础信息自动解析\" onChange={e=>this.parseBasicInfo(e)}/>\r\n                                </Col>\r\n                            </Form.Row>\r\n                            <Form.Row>\r\n                                <Col><Form.Control name=\"name\" onChange={this.handleChange} type=\"text\" placeholder=\"姓名\" ref={ref=>this.basic.name = ref} /></Col>\r\n                                <Col><Form.Control name=\"id\" onChange={this.handleChange} type=\"text\" placeholder=\"账号\" ref={ref=>this.basic.account = ref}/></Col>\r\n                                <Col><Form.Control name=\"age\" onChange={this.handleChange} type=\"text\" placeholder=\"年龄\" ref={ref=>this.basic.age = ref} /></Col>\r\n                                <Col><Form.Control name=\"consultant\" onChange={this.handleChange} type=\"text\" placeholder=\"顾问\" ref={ref=>this.basic.consultant = ref}/></Col>\r\n                            </Form.Row>\r\n                        </Form>\r\n                    );\r\n                // 课堂表现盒子\r\n                case \"star-box\":\r\n                    return (\r\n                        <StarBox key={\"star\" + this.mapKey++} count={5} onChange={count=> {\r\n                            let stars = '';\r\n                            for (let i = 0; i < count; i++) {\r\n                                stars += '⭐';\r\n                            }\r\n                            this.inputValue[\"star\"] = stars;\r\n                        }} className=\"mb-0\">\r\n\r\n                        </StarBox>\r\n                    );\r\n                case \"check-box\":\r\n                    this.inputValue[e.name] = [];\r\n                    return (\r\n                        <Form key={\"check-box\" + this.mapKey++}>\r\n                            {\r\n                                e.value.map(v=> {\r\n                                    this.inputValue[e.name].push(v);    // 默认选中\r\n                                    return (\r\n                                        <Form.Check \r\n                                            defaultChecked\r\n                                            type=\"checkbox\"\r\n                                            key={\"check-item\" + this.mapKey++}\r\n                                            id={\"check-item\" + (this.props.spawnerId == null ? Math.random() * 1000 : this.props.spawnerId) + this.mapKey++}\r\n                                            label={v}\r\n                                            value={v}\r\n                                            name={e.name}\r\n                                            onChange={this.handleCheckBoxChange}\r\n                                        />\r\n                                    );\r\n                                })\r\n                            }\r\n                        </Form>\r\n                    );\r\n                // 选择一项\r\n                case \"select\":\r\n                    this.inputValue[e.name] = e.value[Object.keys(e.value)[0]];\r\n                    return (\r\n                        <Select className=\"mb-1\" option={e.value} key={\"select\" + this.mapKey++} onChange={value=>this.handleSelectChange(e.name, value)} />\r\n                    );\r\n                default:\r\n                    return null;\r\n            }\r\n        }\r\n        for (let x of form) {\r\n            const elements = x.item.map(e=> createElement(e));\r\n            forms.push((\r\n                <Card.Body className=\"pl-2 pr-2 pt-2 pb-1 \" key={\"card\" + this.mapKey++} >\r\n                    <h5 style={{fontSize: \"1.1em\"}}>{x.title}</h5>\r\n                    {elements}\r\n                </Card.Body>\r\n            ));\r\n        }\r\n        return forms;\r\n    }\r\n\r\n    onClickSpawn = (template)=> {\r\n        if (this.result.value !== this.lastResult) {\r\n            this.setAlertVisible(true);\r\n        } else {\r\n            this.spawnResult(template);\r\n        }\r\n    }\r\n    spawnResult = (template)=> {\r\n        let result = '';\r\n        for (let x of template) {\r\n            result += x + '\\n';\r\n        }\r\n        // 解析文本\r\n        let count = 0;\r\n        while (result.search(/\\$\\{[^}]*\\}/g) !== -1 && count < 100) {\r\n            result = result.replace(/\\$\\{([^}]*)\\}/g, (matched, key)=> {\r\n                if (Array.isArray(this.inputValue[key])) {\r\n                    return this.inputValue[key].join('，') + '。';\r\n                }\r\n                return this.inputValue[key];\r\n            });\r\n            ++count;\r\n        }\r\n        if (result.search(/\\$\\{[^}]*\\}/g) !== -1 && count >= 100) {\r\n            showMessageBox(\"堆栈溢出，请确定配置文件的模板变量没有嵌套调用\", \"错误\", \"error\");\r\n        }\r\n        this.result.value = result;\r\n        this.result.select();\r\n        document.execCommand('copy');\r\n        this.lastResult = result;\r\n    }\r\n\r\n    setAlertVisible = show=> {\r\n        this.setState({\r\n            showAlert: show\r\n        });\r\n    }\r\n    render() {\r\n        const { course } = this.state;\r\n        const { template } = course;\r\n        \r\n        return (\r\n            <Card bg=\"light\" className=\"mb-3\" style={{ width: '22rem' }}>\r\n                {/*<Card.Header>{name}</Card.Header>*/}\r\n                <Card.Header><Select defaultValue={this.courseSelectDefaultValue} option={this.courseSelect} onChange={v=> {\r\n                    this.inputValue[\"course\"] = this.courseList[v].name;\r\n                    this.setState({\r\n                        course: this.courseList[v],\r\n                        formElement: this.createForm(this.courseList[v].form)\r\n                    });\r\n                }}></Select></Card.Header>\r\n                {this.state.formElement}\r\n                <Card.Body className=\"pt-1\">\r\n                    <Button variant=\"outline-secondary\" className=\"mb-2\" style={{width: \"100%\"}} onClick={()=>this.onClickSpawn(template)}>生成并复制</Button>\r\n                    <Form.Control as=\"textarea\" style={{height: \"150px\"}} ref={ref=> this.result = ref}/>\r\n                </Card.Body>\r\n                <Modal show={this.state.showAlert} onHide={()=>this.setAlertVisible(false)} centered>\r\n                    <Modal.Header closeButton>\r\n                    <Modal.Title>文本被修改</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>重新生成后修改将丢失</Modal.Body>\r\n                    <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={()=>this.setAlertVisible(false)}>\r\n                        取消\r\n                    </Button>\r\n                    <Button variant=\"primary\" onClick={()=>{\r\n                        this.setAlertVisible(false)\r\n                        this.spawnResult(template);\r\n                    }}>\r\n                        生成\r\n                    </Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n            </Card>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport { Container, Row } from 'react-bootstrap';\r\nimport { Spawner } from './Spawner';\r\n\r\nexport class SpawnerContainer extends React.Component {\r\n    static defaultProps = {\r\n        spawners: []\r\n    };\r\n    render() {\r\n        return (\r\n            <Container fluid className='mt-3' style={{background: \"#FDFEFE\"}}>\r\n                <Row className=\"justify-content-around\">\r\n                    {this.props.spawners.map(e=>{\r\n                        const id = e.spawnerId ? e.spawnerId : Math.random() * 1000;\r\n                        return (\r\n                            <Spawner course={e.course} courseList={e.courseList} spawnerId={id} key={\"spawner\" + id}/>\r\n                        );\r\n                    })}\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n}"],"sourceRoot":""}